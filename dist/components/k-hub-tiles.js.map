{"file":"k-hub-tiles.js","mappings":";;AAAA,MAAM,YAAY,GAAG,4TAA4T,CAAC;AAClV,wBAAe,YAAY;;MCMd,SAAS;;;;;yBACqC,EAAE;;;IAIzD,MAAM,iBAAiB;QACnB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QACnC,IAAI,CAAC,SAAS,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,KAAK;YAClC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAA;SAEtD,CAAC,CAAA;KACL;IACD,MAAM,CAAC,GAAG;QACN,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAA;KAC7B;IAID,MAAM;QACF,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAChC,IAAI,KAAK,4DAAK,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAE,iEAAS,IAAI,CAAC,KAAK,CAAU,CAAM,CAAC,CAAC,CAAA;QAElG,OAAO,CAAC,kEAAU,WAAW,CAAW;SAEvC,CAAA;KACJ;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/k-hub-tiles/k-hub-tiles.css?tag=k-hub-tiles&encapsulation=shadow","src/components/k-hub-tiles/k-hub-tiles.tsx"],"sourcesContent":[":host {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 5% 10%;\r\n\r\n}\r\n\r\nsection {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    gap: 2rem;\r\n    min-height: 30vh;\r\n    /* border: solid 2px; */\r\n\r\n}\r\n\r\ndiv {\r\n    display: grid;\r\n    /* height: 10em; */\r\n    place-items: center;\r\n    text-align: center;\r\n    border: solid 2px;\r\n    font-size: 20px;\r\n    max-height: 10rem;\r\n    /* max-width: 15rem; */\r\n    margin-left: 4rem;\r\n    \r\n}\r\n\r\ndiv:hover {\r\n    background-color: rgb(143, 140, 140);\r\n    color: white;\r\n\r\n}\r\n\r\n","import { Component, Prop, State, h } from '@stencil/core';\r\n@Component({\r\n    tag: 'k-hub-tiles',\r\n    styleUrl: 'k-hub-tiles.css',\r\n    shadow: true,\r\n})\r\n\r\nexport class kHubTiles {\r\n    @State() tilesList: { title: string, url: string }[] = []\r\n    @Prop() tList: string\r\n\r\n\r\n    async componentWillLoad() {\r\n        const response = await fetch(this.tList)\r\n        const tiles = await response.json()\r\n        this.tilesList = await tiles.map(match => {\r\n            return { title: match[\"title\"], url: match[\"url\"] }\r\n\r\n        })\r\n    }\r\n    launch(url) {\r\n        window.location.href = url\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let maincontent = this.tilesList.map(\r\n            tile => (<div onClick={this.launch.bind(this, tile.url)}><strong>{tile.title}</strong></div>))\r\n\r\n        return [<section>{maincontent}</section>\r\n\r\n        ]\r\n    }\r\n\r\n}"],"version":3}